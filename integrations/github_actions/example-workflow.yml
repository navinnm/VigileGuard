# Example GitHub Actions Workflow for VigileGuard Security Audits
name: Security Audit

on:
  # Run on push to main branches
  push:
    branches: [ main, develop, staging ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
  
  # Run on pull requests
  pull_request:
    branches: [ main, develop ]
    types: [opened, synchronize, reopened]
  
  # Allow manual triggering
  workflow_dispatch:
    inputs:
      target:
        description: 'Target server to scan'
        required: true
        default: 'production.example.com'
      severity:
        description: 'Minimum severity threshold'
        required: false
        default: 'medium'
        type: choice
        options:
          - 'critical'
          - 'high'
          - 'medium'
          - 'low'

# Limit concurrent runs
concurrency:
  group: security-audit-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Basic security scan
  security-scan:
    name: Security Audit
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    outputs:
      scan-status: ${{ steps.scan.outputs.scan-status }}
      critical-count: ${{ steps.scan.outputs.critical-count }}
      high-count: ${{ steps.scan.outputs.high-count }}
      total-issues: ${{ steps.scan.outputs.total-issues }}
      compliance-score: ${{ steps.scan.outputs.compliance-score }}
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: VigileGuard Security Scan
        id: scan
        uses: ./integrations/github_actions  # Use local action for testing
        with:
          target: ${{ github.event.inputs.target || 'demo.vigileguard.local' }}
          config-file: '.github/vigileguard.yml'
          checkers: 'ssh,firewall,web-server,ssl,headers'
          fail-on-critical: true
          fail-on-high: false
          output-format: 'json'
          upload-results: true
          comment-pr: ${{ github.event_name == 'pull_request' }}
          webhook-url: ${{ secrets.SLACK_WEBHOOK_URL }}
          severity-threshold: ${{ github.event.inputs.severity || 'medium' }}
          timeout: 300
      
      - name: Upload Security Reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: vigileguard-security-reports
          path: |
            /app/reports/vigileguard_report_*
            /tmp/vigileguard-artifacts/*
          retention-days: 30
      
      - name: Security Gate Check
        if: steps.scan.outputs.scan-status == 'failed'
        run: |
          echo "‚ùå Security scan failed!"
          echo "Critical issues: ${{ steps.scan.outputs.critical-count }}"
          echo "High issues: ${{ steps.scan.outputs.high-count }}"
          echo "Please review and fix security issues before merging."
          exit 1

  # Multi-environment scan
  multi-env-scan:
    name: Multi-Environment Scan
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    strategy:
      matrix:
        environment:
          - name: staging
            target: staging.example.com
            fail-critical: true
            fail-high: false
          - name: production
            target: production.example.com
            fail-critical: true
            fail-high: true
      fail-fast: false
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Scan ${{ matrix.environment.name }}
        uses: ./integrations/github_actions
        with:
          target: ${{ matrix.environment.target }}
          config-file: '.github/vigileguard-${{ matrix.environment.name }}.yml'
          fail-on-critical: ${{ matrix.environment.fail-critical }}
          fail-on-high: ${{ matrix.environment.fail-high }}
          upload-results: true
          webhook-url: ${{ secrets.SECURITY_WEBHOOK_URL }}

  # Compliance reporting
  compliance-report:
    name: Compliance Report
    runs-on: ubuntu-latest
    needs: security-scan
    if: always() && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Generate Compliance Report
        uses: ./integrations/github_actions
        with:
          target: 'fleet.example.com'
          checkers: 'all'
          output-format: 'html'
          upload-results: true
          api-endpoint: ${{ secrets.VIGILEGUARD_API_ENDPOINT }}
          api-key: ${{ secrets.VIGILEGUARD_API_KEY }}
      
      - name: Notify Compliance Team
        if: needs.security-scan.outputs.compliance-score < 85
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'üö® Compliance Score Below Threshold',
              body: `
                ## Compliance Alert
                
                The security compliance score has dropped below the required threshold.
                
                **Current Score:** ${{ needs.security-scan.outputs.compliance-score }}%
                **Required:** 85%
                **Critical Issues:** ${{ needs.security-scan.outputs.critical-count }}
                **High Issues:** ${{ needs.security-scan.outputs.high-count }}
                
                Please review the security scan results and address the identified issues.
                
                **Scan Details:**
                - Commit: ${context.sha}
                - Branch: ${context.ref}
                - Workflow: [${context.runId}](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})
              `,
              labels: ['security', 'compliance', 'urgent']
            });

  # Scheduled security audit
  scheduled-audit:
    name: Scheduled Security Audit
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    
    strategy:
      matrix:
        target:
          - web1.example.com
          - web2.example.com
          - api.example.com
          - db.example.com
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Scheduled Scan - ${{ matrix.target }}
        uses: ./integrations/github_actions
        with:
          target: ${{ matrix.target }}
          config-file: '.github/vigileguard-production.yml'
          fail-on-critical: false  # Don't fail scheduled scans
          fail-on-high: false
          upload-results: true
          webhook-url: ${{ secrets.SECURITY_WEBHOOK_URL }}
          api-endpoint: ${{ secrets.VIGILEGUARD_API_ENDPOINT }}
          api-key: ${{ secrets.VIGILEGUARD_API_KEY }}

# Schedule weekly security audits
  schedule:
    - cron: '0 2 * * 1'  # Every Monday at 2 AM UTC