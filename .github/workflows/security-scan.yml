name: Security Scan

on:
  schedule:
    # Run security scans daily at 3 AM UTC
    - cron: '0 3 * * *'
  workflow_dispatch:
  push:
    branches: [ main ]
    paths:
      - 'vigileguard/**'
      - 'requirements.txt'
      - 'setup.py'

permissions:
  contents: read
  security-events: write
  issues: write  # Required for creating security issues
  pull-requests: read

jobs:
  security-scan:
    name: Advanced Security Scanning
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.8'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      - name: Run Bandit security scan
        run: |
          bandit -r vigileguard/ -f json -o bandit-results.json
          bandit -r vigileguard/ -f txt -o bandit-results.txt
        continue-on-error: true

      - name: Run Safety dependency check
        run: |
          safety check --json --output safety-results.json
          safety check --output safety-results.txt
        continue-on-error: true

      - name: Run Semgrep SAST scan
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/python
        env:
          SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}
        continue-on-error: true

      - name: Run CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          languages: python
          queries: security-extended

      - name: Upload security scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-scan-results
          path: |
            bandit-results.*
            safety-results.*
          retention-days: 30

      - name: Create security issue on failure
        if: failure() && github.event_name != 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            try {
              const issue = await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: 'ðŸ”’ Security Scan Failed',
                body: `
                Security scan failed in workflow run: ${context.runId}
                
                Please review the security scan results and address any issues found.
                
                - Check Bandit results for code security issues
                - Review Safety results for dependency vulnerabilities
                - Examine CodeQL results for additional security findings
                
                **Workflow Details:**
                - Run ID: ${context.runId}
                - Commit: ${context.sha}
                - Branch: ${context.ref}
                - Actor: ${context.actor}
                
                **Links:**
                - [Workflow Run](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})
                - [Commit](https://github.com/${context.repo.owner}/${context.repo.repo}/commit/${context.sha})
                `,
                labels: ['security', 'urgent', 'automated']
              });
              console.log(`Created security issue #${issue.data.number}`);
            } catch (error) {
              console.log(`Failed to create issue: ${error.message}`);
              console.log('This may be due to insufficient permissions or repository settings.');
              // Don't fail the workflow if issue creation fails
            }