name: Security Scan

on:
  schedule:
    # Run security scans daily at 3 AM UTC
    - cron: '0 3 * * *'
  workflow_dispatch:
  push:
    branches: [ main ]
    paths:
      - 'vigileguard/**'
      - 'requirements.txt'
      - 'setup.py'
      - 'pyproject.toml'

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  security-scan:
    name: Advanced Security Scanning
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.8'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          
          # Create missing files to prevent build errors
          touch LICENSE
          mkdir -p scripts
          touch scripts/vigileguard-setup-cron.sh
          chmod +x scripts/vigileguard-setup-cron.sh
          
          # Install package and dev dependencies
          pip install -r requirements.txt
          pip install bandit safety semgrep

      - name: Run Bandit security scan
        run: |
          echo "🔍 Running Bandit security scan..."
          bandit -r vigileguard/ -f json -o bandit-results.json || true
          bandit -r vigileguard/ -f txt -o bandit-results.txt || true
          
          # Check for critical issues
          if [ -f bandit-results.json ]; then
            echo "📊 Bandit scan completed"
            python -c "
          import json
          try:
              with open('bandit-results.json', 'r') as f:
                  data = json.load(f)
                  results = data.get('results', [])
                  high_issues = [r for r in results if r.get('issue_severity') == 'HIGH']
                  print(f'Found {len(high_issues)} high severity issues')
                  if high_issues:
                      print('High severity issues:')
                      for issue in high_issues[:3]:
                          print(f'  - {issue.get(\"test_name\", \"Unknown\")}: {issue.get(\"issue_text\", \"No description\")}')
          except Exception as e:
              print(f'Error analyzing bandit results: {e}')
          " || echo "Bandit analysis had issues"
          else
            echo "⚠️ Bandit results file not created"
          fi
        continue-on-error: true

      - name: Run Safety dependency check
        run: |
          echo "🔍 Running Safety dependency scan..."
          safety check --json --output safety-results.json || true
          safety check --output safety-results.txt || true
          
          if [ -f safety-results.json ]; then
            echo "📊 Safety scan completed"
            # Check for vulnerabilities
            python -c "
          import json
          try:
              with open('safety-results.json', 'r') as f:
                  data = json.load(f)
                  vulns = data.get('vulnerabilities', []) if isinstance(data, dict) else data
                  if isinstance(vulns, list) and vulns:
                      print(f'Found {len(vulns)} dependency vulnerabilities')
                      for vuln in vulns[:3]:
                          if isinstance(vuln, dict):
                              pkg = vuln.get('package_name', 'Unknown')
                              vuln_id = vuln.get('vulnerability_id', 'Unknown')
                              print(f'  - {pkg}: {vuln_id}')
                  else:
                      print('No dependency vulnerabilities found')
          except Exception as e:
              print(f'Error analyzing safety results: {e}')
          " || echo "Safety analysis had issues"
          else
            echo "⚠️ Safety results file not created"
          fi
        continue-on-error: true

      - name: Run Semgrep SAST scan
        run: |
          echo "🔍 Running Semgrep SAST scan..."
          # Use public rules - no token required
          semgrep --config=auto vigileguard/ --json --output=semgrep-results.json || true
          
          if [ -f semgrep-results.json ]; then
            echo "📊 Semgrep scan completed"
            python -c "
          import json
          try:
              with open('semgrep-results.json', 'r') as f:
                  data = json.load(f)
                  results = data.get('results', [])
                  print(f'Semgrep found {len(results)} potential issues')
                  if results:
                      for result in results[:3]:
                          rule_id = result.get('check_id', 'Unknown')
                          message = result.get('extra', {}).get('message', 'No message')
                          print(f'  - {rule_id}: {message}')
          except Exception as e:
              print(f'Error analyzing semgrep results: {e}')
          " || echo "Semgrep analysis had issues"
          else
            echo "⚠️ Semgrep results file not created"
          fi
        continue-on-error: true

      - name: Upload security scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-scan-results
          path: |
            bandit-results.*
            safety-results.*
            semgrep-results.*
          retention-days: 30

      - name: Generate security summary
        if: always()
        run: |
          echo "## 🔒 Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Bandit summary
          if [ -f bandit-results.txt ]; then
            echo "### 🛡️ Bandit Code Security Scan" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            tail -10 bandit-results.txt >> $GITHUB_STEP_SUMMARY || echo "No bandit summary available" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Safety summary
          if [ -f safety-results.txt ]; then
            echo "### 🔐 Safety Dependency Scan" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            head -20 safety-results.txt >> $GITHUB_STEP_SUMMARY || echo "No safety summary available" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📁 Detailed results available in the artifacts section." >> $GITHUB_STEP_SUMMARY

  # CodeQL Analysis (separate job for better reliability)
  codeql:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.8'

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: python

      - name: Install package for analysis
        run: |
          python -m pip install --upgrade pip
          
          # Create missing files
          touch LICENSE
          mkdir -p scripts
          touch scripts/vigileguard-setup-cron.sh
          chmod +x scripts/vigileguard-setup-cron.sh
          
          # Install dependencies
          pip install -r requirements.txt || echo "Requirements install had issues"

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:python"

  # Trivy vulnerability scanning
  trivy:
    name: Trivy Vulnerability Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
        continue-on-error: true

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
          category: 'trivy-filesystem'
        continue-on-error: true

      - name: Generate Trivy report
        run: |
          echo "🔍 Running Trivy for human-readable report..."
          trivy fs --format table --output trivy-report.txt . || echo "Trivy table format failed"
          
          if [ -f trivy-report.txt ]; then
            echo "## 🔍 Trivy Vulnerability Scan" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            head -50 trivy-report.txt >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Upload Trivy report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: trivy-report
          path: trivy-report.txt
          retention-days: 30

  # Summary job
  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [security-scan, codeql, trivy]
    if: always()
    
    steps:
      - name: Generate overall security summary
        run: |
          echo "## 🛡️ VigileGuard Security Assessment Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Scan Results:" >> $GITHUB_STEP_SUMMARY
          echo "- **Bandit (Code Security)**: ${{ needs.security-scan.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **CodeQL (Static Analysis)**: ${{ needs.codeql.result }}" >> $GITHUB_STEP_SUMMARY  
          echo "- **Trivy (Vulnerabilities)**: ${{ needs.trivy.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📊 Security Status:" >> $GITHUB_STEP_SUMMARY
          
          # Determine overall status
          if [[ "${{ needs.security-scan.result }}" == "success" && "${{ needs.codeql.result }}" == "success" && "${{ needs.trivy.result }}" == "success" ]]; then
            echo "✅ **All security scans completed successfully**" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ **Some security scans had issues - review individual scan results**" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔗 Next Steps:" >> $GITHUB_STEP_SUMMARY
          echo "1. Review security scan artifacts for detailed findings" >> $GITHUB_STEP_SUMMARY
          echo "2. Check the Security tab for uploaded SARIF results" >> $GITHUB_STEP_SUMMARY
          echo "3. Address any high-priority security issues found" >> $GITHUB_STEP_SUMMARY
          echo "4. Consider running additional manual security tests" >> $GITHUB_STEP_SUMMARY