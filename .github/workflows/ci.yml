name: VigileGuard CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]
  schedule:
    # Run security scan daily at 2 AM UTC
    - cron: '0 2 * * *'

# Add explicit permissions for security scanning
permissions:
  contents: read
  security-events: write
  actions: read

env:
  PYTHON_VERSION: '3.8'

jobs:
  # Code Quality Checks
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install black flake8 mypy bandit safety

      - name: Code formatting check
        run: |
          black --check --line-length=100 vigileguard.py
          echo "âœ… Code formatting check passed"

      - name: Lint with flake8
        run: |
          flake8 vigileguard.py --max-line-length=100 --ignore=E203,W503 --statistics
          echo "âœ… Linting check passed"

      - name: Type checking with mypy
        run: |
          mypy vigileguard.py --ignore-missing-imports
          echo "âœ… Type checking passed"
        continue-on-error: true

      - name: Security scan with bandit
        run: |
          bandit -r . -f json -o bandit-report.json
          echo "âœ… Security scan completed"
        continue-on-error: true

      - name: Dependency security check
        run: |
          safety check --json --output safety-report.json
          echo "âœ… Dependency security check completed"
        continue-on-error: true

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json
          retention-days: 30

  # Multi-Python Version Testing
  test:
    name: Test Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, ubuntu-20.04]
        python-version: ["3.8", "3.9", "3.10", "3.11"]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-${{ matrix.python-version }}-pip-${{ hashFiles('requirements.txt') }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Test VigileGuard basic functionality
        run: |
          python vigileguard.py --help
          python vigileguard.py --version
          echo "âœ… Basic functionality tests passed"

      - name: Test JSON output
        run: |
          python vigileguard.py --format json --output test-report.json
          test -f test-report.json
          echo "âœ… JSON output test passed"

      - name: Test with custom config
        run: |
          python vigileguard.py --config config.yaml --format console
          echo "âœ… Custom config test passed"

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.python-version }}
          path: test-report.json
          retention-days: 30

  # Security Audit (Fixed)
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Documentation Test (Fixed)
  docs:
    name: Documentation Test
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          pip install -r requirements.txt

      - name: Verify README examples
        run: |
          # Test that VigileGuard works as documented
          python vigileguard.py --help > /dev/null
          python vigileguard.py --version > /dev/null
          echo "âœ… README examples verified"

      - name: Check documentation completeness
        run: |
          # Verify essential files exist
          test -f README.md && echo "âœ… README.md exists"
          test -f requirements.txt && echo "âœ… requirements.txt exists"
          test -f config.yaml && echo "âœ… config.yaml exists"
          test -f install.sh && echo "âœ… install.sh exists"
          test -f Dockerfile && echo "âœ… Dockerfile exists"
          test -f Makefile && echo "âœ… Makefile exists"
          
          # Check README has essential sections
          grep -q "## Installation" README.md && echo "âœ… Installation section exists"
          grep -q "Usage" README.md && echo "âœ… Usage section exists"
          grep -q "CI/CD" README.md && echo "âœ… CI/CD section exists"

  # Docker Build and Test
  docker:
    name: Docker Build & Test
    runs-on: ubuntu-latest
    needs: [quality]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        run: |
          docker build -t vigileguard:test .
          echo "âœ… Docker image built successfully"

      - name: Test Docker image
        run: |
          docker run --rm vigileguard:test --help
          docker run --rm vigileguard:test --version
          echo "âœ… Docker image tests passed"

  # Performance Testing
  performance:
    name: Performance Test
    runs-on: ubuntu-latest
    needs: [test]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          pip install -r requirements.txt

      - name: Performance benchmark
        run: |
          echo "ðŸš€ Running performance tests..."
          time python vigileguard.py --format json > /dev/null
          echo "âœ… Performance tests completed"