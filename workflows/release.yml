name: Release

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., 3.0.2)'
        required: true
        type: string
      prerelease:
        description: 'Is this a pre-release?'
        required: false
        type: boolean
        default: false

permissions:
  contents: write
  packages: write
  id-token: write

jobs:
  build-and-publish:
    name: Build and Publish Release
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.8'

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine setuptools wheel

      - name: Update version if manual trigger
        if: github.event_name == 'workflow_dispatch'
        run: |
          VERSION="${{ github.event.inputs.version }}"
          echo "Updating version to $VERSION"
          
          # Update version in __init__.py
          sed -i "s/__version__ = \".*\"/__version__ = \"$VERSION\"/" vigileguard/__init__.py
          
          # Update version in setup.py
          sed -i "s/version=\".*\"/version=\"$VERSION\"/" setup.py
          
          # Update version in pyproject.toml
          sed -i "s/version = \".*\"/version = \"$VERSION\"/" pyproject.toml

      - name: Build package
        run: |
          echo "üèóÔ∏è Building VigileGuard package..."
          python -m build
          echo "‚úÖ Build completed"

      - name: Check package
        run: |
          echo "üîç Checking package integrity..."
          twine check dist/*
          echo "‚úÖ Package check passed"

      - name: Publish to Test PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.TEST_PYPI_API_TOKEN }}
        run: |
          echo "üì¶ Publishing to Test PyPI..."
          twine upload --repository testpypi dist/* --verbose
        continue-on-error: true

      - name: Test installation from Test PyPI
        run: |
          echo "üß™ Testing installation from Test PyPI..."
          sleep 60  # Wait for package to be available
          pip install --index-url https://test.pypi.org/simple/ --extra-index-url https://pypi.org/simple/ vigileguard
          vigileguard --version
          python -c "import vigileguard; print('‚úÖ Test PyPI installation successful')"

      - name: Publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          echo "üöÄ Publishing to PyPI..."
          twine upload dist/* --verbose

      - name: Create GitHub Release Assets
        run: |
          echo "üì¶ Creating release assets..."
          
          # Create comprehensive source archive
          tar -czf vigileguard-${{ github.ref_name }}-source.tar.gz \
            vigileguard/ scripts/ tests/ docs/ examples/ \
            setup.py pyproject.toml requirements.txt \
            README.md LICENSE SECURITY.md Makefile \
            install.sh Dockerfile config.yaml
          
          # Create installation package
          zip -r vigileguard-${{ github.ref_name }}-install.zip \
            vigileguard/ install.sh requirements.txt README.md LICENSE config.yaml

      - name: Upload Release Assets
        uses: softprops/action-gh-release@v1
        with:
          files: |
            dist/*
            vigileguard-${{ github.ref_name }}-source.tar.gz
            vigileguard-${{ github.ref_name }}-install.zip
          body: |
            ## üõ°Ô∏è VigileGuard ${{ github.ref_name }}
            
            ### What's New
            - Phase 1 + Phase 2 security auditing capabilities
            - Enhanced web server and network security checks
            - Improved HTML reporting with compliance mapping
            - Better notification integrations
            
            ### Installation
            ```bash
            pip install vigileguard==${{ github.ref_name }}
            ```
            
            ### Quick Start
            ```bash
            vigileguard --format html --output security-report.html
            ```
            
            ### Package Contents
            - **vigileguard-${{ github.ref_name }}-source.tar.gz**: Complete source code with development tools
            - **vigileguard-${{ github.ref_name }}-install.zip**: Ready-to-use installation package
            - **vigileguard-${{ github.ref_name }}.tar.gz**: Source distribution
            - **vigileguard-${{ github.ref_name }}-py3-none-any.whl**: Wheel distribution
            
            For full documentation, see the [README](https://github.com/navinnm/VigileGuard/blob/main/README.md).
          draft: false
          prerelease: ${{ github.event.inputs.prerelease || false }}

  build-docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: build-and-publish
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            vigileguard/vigileguard:latest
            vigileguard/vigileguard:${{ steps.version.outputs.version }}
          labels: |
            org.opencontainers.image.title=VigileGuard
            org.opencontainers.image.description=Comprehensive Linux Security Audit Tool
            org.opencontainers.image.version=${{ steps.version.outputs.version }}
            org.opencontainers.image.source=https://github.com/navinnm/VigileGuard
            org.opencontainers.image.licenses=MIT

  update-documentation:
    name: Update Documentation
    runs-on: ubuntu-latest
    needs: build-and-publish
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Update version badges
        run: |
          VERSION="${{ github.ref_name }}"
          
          # Update version badge in README
          sed -i "s/version-[0-9]\+\.[0-9]\+\.[0-9]\+-/version-${VERSION}-/" README.md
          
          # Commit changes if any
          if git diff --quiet; then
            echo "No documentation updates needed"
          else
            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Action"
            git add README.md
            git commit -m "docs: Update version badges for release $VERSION"
            git push
          fi

  notify-release:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [build-and-publish, build-docker]
    if: always()
    
    steps:
      - name: Notify Slack
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              text: "üõ°Ô∏è VigileGuard ${{ github.ref_name }} Released!",
              attachments: [
                {
                  color: "good",
                  fields: [
                    {
                      title: "Release",
                      value: "${{ github.ref_name }}",
                      short: true
                    },
                    {
                      title: "PyPI",
                      value: "https://pypi.org/project/vigileguard/",
                      short: true
                    },
                    {
                      title: "Docker",
                      value: "vigileguard/vigileguard:${{ github.ref_name }}",
                      short: true
                    },
                    {
                      title: "GitHub",
                      value: "https://github.com/navinnm/VigileGuard/releases/tag/${{ github.ref_name }}",
                      short: true
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}